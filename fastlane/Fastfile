# Customise this file, documentation can be found here:
# https://github.com/KrauseFx/fastlane/tree/master/docs
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.48.0"

default_platform :ios

platform :ios do
  before_all do |lane, options|

    clear_derived_data

    if(lane != :offline && lane != :add_devices && lane != :create)
      #cocoapods 
      
        increment_build_number(build_number:'1')
      
    end

    # xctool # run the tests of your app
  end

  desc "Runs all the tests"
  lane :test do
    snapshot
  end
  
  desc "Creates App"



  lane :create do
    produce(
      username: "cguess@icfj.org",
      app_identifier: "com.occrp.cin",
      app_name: "Centar za istra탑iva훾ko novinarstvo",
      language: "English"
    )
  end

  desc "Adds devices"
  lane :add_devices do
    register_devices(
        devices: {
            "Christopher Guess" => "b725c07c5e9799a9f824d544abc2534d9d317884"
        }
    )
  end

  desc "Creates development and stuff"
  lane :bootstrap do |options|
    cert(
      username: 'cguess@icfj.org',
      development: true
    )

    produce(
      username: "cguess@icfj.org",
      app_identifier: "com.occrp.cin",
      company_name: "Journalism Development Network",
      app_name: "Centar za istra탑iva훾ko novinarstvo",
      language: "English"
    )

    sigh(
      development: true,
      force: true,
      username: "cguess@icfj.org",
      app_identifier: "com.occrp.cin"
    )


    
    # use the UID of the newly created provisioning profile
    # ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

    update_project_provisioning(
    )

  end


  desc "Used to test the generator"
  lane :gen_test do |options|
    cert(
      username: 'cguess@icfj.org',
    )

    sigh(
      adhoc: true,
      force: true,
      username: "cguess@icfj.org",
      app_identifier: "com.occrp.cin"
    )
    
    # use the UID of the newly created provisioning profile
    # ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

    update_project_provisioning(
    )

    gym(
      #use_legacy_build_api: true,
      clean: true,
      scheme: 'Push',
    )
  end

  desc "Used to test the generator when offline"
  lane :offline do |options|
    # use the UID of the newly created provisioning profile
    ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

    gym(
      #use_legacy_build_api: true,
      clean: true,
      scheme: 'Push',
    )
  end

  desc "Submit a new Beta Build to HockeyApp"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    cert(
      username: 'cguess@icfj.org',
    )
    sigh(
      force: true,
      username: "cguess@icfj.org",
      app_identifier: "com.occrp.cin"
    )
    
    # use the UID of the newly created provisioning profile
    ENV["PROFILE_UUID"] = lane_context[SharedValues::SIGH_UDID]

    update_project_provisioning(
    )

    gym(
      #use_legacy_build_api: true,
      clean: true,
      scheme: 'Push',
      
    ) # Build your app - more options available
    #hockey(
    #  api_token: "0b69fda8a2124bc3bbf699b5c03b18ac",
    #  notes: options[:notes],
    #  #public_identifier: "0dce3b5dc14d4f0889881da636cead08"
    #)
    pilot(
      changelog: options[:notes]
    )

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the App Store"
  lane :deploy do
    increment_version_number(version_number:'1.0')
    #ensure_no_debug_code(text: "NSLog")
    cert(
      username: 'cguess@icfj.org',
    )
    #snapshot
    sigh(
	    force: true,
    	username: "cguess@icfj.org",
    	app_identifier: "com.occrp.cin",
    )

    update_project_provisioning(
    )

    gym(
        scheme: "Push",
	      #use_legacy_build_api: true,
	      clean: true,
        include_symbols: true,
        include_bitcode: true,
    )
    deliver(
    	force: true,
    	username: "cguess@icfj.org",
    )

  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    
    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end



# More information about multiple platforms in fastlane: https://github.com/KrauseFx/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/KrauseFx/fastlane/blob/master/docs/Actions.md
